{"version":3,"file":"types.js","sourceRoot":"","sources":["types.ts"],"names":[],"mappings":"","sourcesContent":["import { IElementInternals } from \"element-internals-polyfill\";\n\n/** Generic constructor type */\n/* eslint-disable  @typescript-eslint/no-explicit-any */\nexport type Constructor<T = Record<string, unknown>> = new (...args: any[]) => T;\n\n/** Union type for form values */\nexport type FormValue = File|FormData|string|null;\n\n/** Validation message callback */\nexport type validationMessageCallback = (instance: any, value: FormValue) => string;\n\n/** Interface of exported FormControl behavior */\nexport interface FormControlInterface {\n  validationTarget?: HTMLElement | null;\n  readonly form: HTMLFormElement;\n  readonly internals: ElementInternals & IElementInternals;\n  readonly showError: boolean;\n  readonly validationMessage: string;\n  readonly validity: ValidityState;\n  readonly validationComplete: Promise<void>;\n  connectedCallback(): void;\n  checkValidity(): boolean;\n  formResetCallback(): void;\n  resetFormControl?(): void;\n  // validateAsync(validator: AsyncValidator): Promise<void>;\n  valueChangedCallback?(value: FormValue): void | Promise<void>;\n  validityCallback(validationKey: string): string | void;\n  validationMessageCallback(message: string): void;\n  setValue(value: FormValue): void;\n  shouldFormValueUpdate?(): boolean;\n}\n\n/**\n * Generic Validator shape. These objects\n * are used to create Validation behaviors on FormControl\n * instances.\n */\nexport interface ValidatorBase {\n  /**\n   * If present, the FormControl object will be re-run\n   * when this attribute changes. Some validators won't need this\n   * like a validator that ensures a given value can be cast\n   * to a number.\n   *\n   * If an array of attribute names are provided, the attribute will\n   * respond to changes for any of the listed attributes.\n   */\n   attribute?: string | string[];\n\n   /**\n    * This key determines which field on the control's validity\n    * object will be toggled when a given Validator is run. This\n    * property must exist on the global constraint validation\n    * (ValidityState) object. Defaults to `customError`.\n    */\n   key?: keyof ValidityState;\n\n   /**\n    * When a control becomes invalid, this property will be set\n    * as the control's validityMessage. If the property is of type\n    * string it will be used outright. If it is a function, the\n    * returned string will be used as the validation message.\n    *\n    * One thing to be concerned with is that overriding a given\n    * Validator's message property via reference will affect\n    * all controls that use that validator. If a user wants to change\n    * the default message, it is best to clone the validator and\n    * change the message that way.\n    *\n    * Validation messages can also be changed by using the\n    * FormControl.prototype.validityCallback, which takes a given\n    * ValidityState key as an argument and must return a validationMessage\n    * for the given instance.\n    */\n   message: string | validationMessageCallback;\n}\n\nexport interface SyncValidator extends ValidatorBase {\n  /**\n   * Callback for a given validator. Takes the FormControl instance\n   * and the form control value as arguments and returns a\n   * boolean to evaluate for that Validator.\n   * @param instance {FormControlInterface} - The FormControl instance\n   * @param value {FormValue} - The form control value\n   * @returns {boolean} - The validity of a given Validator\n   */\n  isValid(instance: HTMLElement, value: FormValue): boolean;\n}\n\nexport interface AsyncValidator extends ValidatorBase {\n   /**\n   * Callback for a given validator. Takes the FormControl instance\n   * and the form control value as arguments and returns a\n   * boolean to evaluate for that Validator as a promise.\n   * @param instance {FormControlInterface} - The FormControl instance\n   * @param value {FormValue} - The form control value\n   * @returns {Promise<boolean>} - The validity of a given Validator\n   */\n  isValid(instance: HTMLElement, value: FormValue, signal: AbortSignal): Promise<boolean|void>;\n}\n\nexport type Validator = SyncValidator|AsyncValidator;\n\n/** Generic type to allow usage of HTMLElement lifecycle methods */\nexport interface IControlHost {\n  attributeChangedCallback?(name: string, oldValue: string, newValue: string): void;\n  connectedCallback?(): void;\n  disconnectedCallback?(): void;\n  checked?: boolean;\n  disabled?: boolean;\n}\n\nexport type CustomValidityState = Partial<Record<keyof ValidityState, boolean>>;\n"]}