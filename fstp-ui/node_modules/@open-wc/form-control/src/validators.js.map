{"version":3,"file":"validators.js","sourceRoot":"","sources":["validators.ts"],"names":[],"mappings":"AAGA,MAAM,CAAC,MAAM,iBAAiB,GAAc;IAC1C,SAAS,EAAE,UAAU;IACrB,GAAG,EAAE,cAAc;IACnB,OAAO,EAAE,4BAA4B;IACrC,OAAO,CAAC,QAA6C,EAAE,KAAgB;QACrE,IAAI,KAAK,GAAG,IAAI,CAAC;QAEjB,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE;YACtE,KAAK,GAAG,KAAK,CAAC;SACf;QAED,OAAO,KAAK,CAAC;IACf,CAAC;CACF,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAc;IAC9C,SAAS,EAAE,OAAO;IAClB,OAAO,CAAC,QAAyC;QAC/C,OAAO,QAAQ,CAAC,KAAK,CAAC;IACxB,CAAC;IACD,OAAO,CAAC,QAAyC;QAC/C,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC;IACzB,CAAC;CACF,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAc;IAC3C,SAAS,EAAE,WAAW;IACtB,GAAG,EAAE,UAAU;IACf,OAAO,CAAC,QAAsD,EAAE,KAAgB;QAC9E,MAAM,MAAM,GAAG,KAAe,IAAI,EAAE,CAAC;QACrC,OAAO,uBAAuB,QAAQ,CAAC,SAAS,wCAAwC,MAAM,CAAC,MAAM,eAAe,CAAC;IACvH,CAAC;IACD,OAAO,CAAC,QAA6C,EAAE,KAAa;QAClE,iEAAiE;QACjE,IAAI,CAAC,KAAK,EAAE;YACV,OAAO,IAAI,CAAC;SACb;QAED,IAAI,CAAC,CAAC,KAAK,IAAI,QAAQ,CAAC,SAAS,GAAG,KAAK,CAAC,MAAM,EAAE;YAChD,OAAO,KAAK,CAAC;SACd;QAED,OAAO,IAAI,CAAC;IACd,CAAC;CACF,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAc;IAC3C,SAAS,EAAE,WAAW;IACtB,GAAG,EAAE,SAAS;IACd,OAAO,CACL,QAAsD,EACtD,KAAgB;QAEhB,MAAM,MAAM,GAAG,KAAe,IAAI,EAAE,CAAC;QACrC,OAAO,2BAA2B,QAAQ,CAAC,SAAS,wCAAwC,MAAM,CAAC,MAAM,eAAe,CAAC;IAC3H,CAAC;IACD,OAAO,CACL,QAA6C,EAC7C,KAAa;QAEb,4CAA4C;QAC5C,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;YACvB,OAAO,IAAI,CAAC;SACb;QAED,IAAI,CAAC,CAAC,KAAK,IAAI,QAAQ,CAAC,SAAS,GAAG,KAAK,CAAC,MAAM,EAAE;YAChD,OAAO,KAAK,CAAC;SACd;QAED,OAAO,IAAI,CAAC;IACd,CAAC;CACF,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAc;IACzC,SAAS,EAAE,SAAS;IACpB,GAAG,EAAE,iBAAiB;IACtB,OAAO,EAAE,mCAAmC;IAC5C,OAAO,CAAC,QAA2C,EAAE,KAAa;QAChE,iEAAiE;QACjE,IAAI,CAAC,KAAK,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE;YAC/B,OAAO,IAAI,CAAC;SACb;QAED,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC5C,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;CACF,CAAC","sourcesContent":["import { Validator } from './index.js';\nimport { FormControlInterface, FormValue } from './types.js';\n\nexport const requiredValidator: Validator = {\n  attribute: 'required',\n  key: 'valueMissing',\n  message: 'Please fill out this field',\n  isValid(instance: HTMLElement & { required: boolean }, value: FormValue): boolean {\n    let valid = true;\n\n    if ((instance.hasAttribute('required') || instance.required) && !value) {\n      valid = false;\n    }\n\n    return valid;\n  }\n};\n\nexport const programmaticValidator: Validator = {\n  attribute: 'error',\n  message(instance: HTMLElement & { error: string }): string {\n    return instance.error;\n  },\n  isValid(instance: HTMLElement & { error: string }): boolean {\n    return !instance.error;\n  }\n};\n\nexport const minLengthValidator: Validator = {\n  attribute: 'minlength',\n  key: 'tooShort',\n  message(instance: FormControlInterface & { minLength: number }, value: FormValue): string {\n    const _value = value as string || '';\n    return `Please use at least ${instance.minLength} characters (you are currently using ${_value.length} characters).`;\n  },\n  isValid(instance: HTMLElement & { minLength: number }, value: string): boolean {\n    /** If no value is provided, this validator should return true */\n    if (!value) {\n      return true;\n    }\n\n    if (!!value && instance.minLength > value.length) {\n      return false;\n    }\n\n    return true;\n  }\n};\n\nexport const maxLengthValidator: Validator = {\n  attribute: 'maxlength',\n  key: 'tooLong',\n  message(\n    instance: FormControlInterface & { maxLength: number },\n    value: FormValue\n  ): string {\n    const _value = value as string || '';\n    return `Please use no more than ${instance.maxLength} characters (you are currently using ${_value.length} characters).`;\n  },\n  isValid(\n    instance: HTMLElement & { maxLength: number },\n    value: string\n  ): boolean {\n    /** If maxLength isn't set, this is valid */\n    if (!instance.maxLength) {\n      return true;\n    }\n\n    if (!!value && instance.maxLength < value.length) {\n      return false;\n    }\n\n    return true;\n  }\n};\n\nexport const patternValidator: Validator = {\n  attribute: 'pattern',\n  key: 'patternMismatch',\n  message: 'Please match the requested format',\n  isValid(instance: HTMLElement & { pattern: string }, value: string): boolean {\n    /** If no value is provided, this validator should return true */\n    if (!value || !instance.pattern) {\n      return true;\n    }\n\n    const regExp = new RegExp(instance.pattern);\n    return !!regExp.exec(value);\n  }\n};\n"]}