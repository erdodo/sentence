import BaseComponent, { EventDispatcher } from 'fstp-ui/src/components/base.component';
import { IAtomSelectGlobalCheckboxStatus, IAtomSelectItem, AtomSelectSizeEnum, AtomSelectStatusEnum } from 'fstp-ui/src/models/atoms';
import 'fstp-ui/src/components/atoms';
import 'fstp-ui/src/components/molecules';
import { PropertyValues, TemplateResult } from 'lit';
import { IPopper } from 'fstp-ui/src/functions';
export declare class AtomSelectComponent extends BaseComponent {
    fName: string;
    fLabel: string;
    fStatus: AtomSelectStatusEnum;
    fDisabled: boolean;
    fReadonly: boolean;
    fPlaceholder: string;
    fValue: string;
    fSize: AtomSelectSizeEnum;
    fHasHelperText: boolean;
    fHasLabel: boolean;
    fHelperText: string;
    fFloatLabel: boolean;
    fRequired: boolean;
    fIsMultiSelect: boolean;
    fIsSearchable: boolean;
    fSearchPlaceholder: string;
    fItems?: IAtomSelectItem[];
    fSelectedKeys?: string | string[];
    fOptionLabel?: string;
    fOptionKey?: string;
    fSelecteds?: IAtomSelectItem[];
    items: IAtomSelectItem[];
    inline_items: IAtomSelectItem[];
    selected_items: IAtomSelectItem[];
    old_selected_items: IAtomSelectItem[];
    value: string;
    selectedLabel: string;
    inputValue: string;
    id: string;
    globalCheckboxStatus: IAtomSelectGlobalCheckboxStatus;
    popperInstance: IPopper;
    fChange?: EventDispatcher<IAtomSelectItem[]>;
    fChangeSelectedKeys?: EventDispatcher<string | string[]>;
    fChangeValue?: EventDispatcher<string>;
    fSearchChange?: EventDispatcher<string>;
    menu: HTMLElement;
    target: HTMLElement;
    select: HTMLElement;
    protected firstUpdated(): void;
    protected updated(_changedProperties: PropertyValues): void;
    render(): TemplateResult;
    private getOptions;
    private setSelectedLabel;
    private _optionSelect;
    private _optionSearch;
    private selectAll;
    private change;
    protected createRenderRoot(): this;
}
export declare const Select: import("@lit/react").ReactWebComponent<AtomSelectComponent, {
    fChange: string;
    fSearchChange: string;
}>;
